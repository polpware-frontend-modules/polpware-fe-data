import * as ngrxStore from '@ngrx/store';
import * as reducerIndex from './reducers/index';
// Store
/*
    ReducerManager,
    StateObservable,
    ActionsSubject
*/
// StateObservable
/*
   ActionsSubject
   ReducerManager
   ScannnedActionsSubject => leaf
   InitialState
*/
// ActionsSubject (leaf)
// ReducerManager
/*
   ReducerManagerDispatcher
   INITIAL_STATE  => pass in parameters
   INITIAL_REDUCERS => ActionReducerMap (pass in parameters)
   REDUCER_FACTORY => combineReducers
   ActionReducerFactory<any, any>
*/
// ReducerManagerDispatcher
/*
   ActionSsubject  (leaf)
*/
// ActionReducerFactory<any, any> (Use combinReducer function from utils)
/*
   ActionReducerMap
   initialState

   ActionReducer
*/
// createReducerfactory
/*
   ActionReducerFactory
   MataReducerFactory

*/
export function factory() {
    const actionSubject = new ngrxStore.ActionsSubject();
    const scannerActionSubject = new ngrxStore.ScannedActionsSubject();
    const reducerManagerDispatch = actionSubject;
    const actionReducerFactory = ngrxStore.combineReducers;
    const reducerManager = new ngrxStore.ReducerManager(actionSubject, reducerIndex.buildInitialState(), reducerIndex.buildReducerMap(), actionReducerFactory);
    const stateObservable = new ngrxStore.State(actionSubject, reducerManager, scannerActionSubject, reducerIndex.buildInitialState());
    const store = new ngrxStore.Store(stateObservable, actionSubject, reducerManager);
    return store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BvbHB3YXJlL2ZlLWRhdGEvc3JjL2xpYi9nZW5lcmljLXN0b3JlL2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFJekMsT0FBTyxLQUFLLFlBQVksTUFBTSxrQkFBa0IsQ0FBQztBQUVqRCxRQUFRO0FBQ1I7Ozs7RUFJRTtBQUVGLGtCQUFrQjtBQUNsQjs7Ozs7RUFLRTtBQUVGLHdCQUF3QjtBQUV4QixpQkFBaUI7QUFDakI7Ozs7OztFQU1FO0FBRUYsMkJBQTJCO0FBRTNCOztFQUVFO0FBRUYseUVBQXlFO0FBRXpFOzs7OztFQUtFO0FBRUYsdUJBQXVCO0FBQ3ZCOzs7O0VBSUU7QUFFRixNQUFNLFVBQVUsT0FBTztJQUVuQixNQUFNLGFBQWEsR0FBRyxJQUFJLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNyRCxNQUFNLG9CQUFvQixHQUFHLElBQUksU0FBUyxDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDbkUsTUFBTSxzQkFBc0IsR0FBdUMsYUFBYSxDQUFDO0lBRWpGLE1BQU0sb0JBQW9CLEdBQTZDLFNBQVMsQ0FBQyxlQUFlLENBQUM7SUFFakcsTUFBTSxjQUFjLEdBQUcsSUFBSSxTQUFTLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFDN0QsWUFBWSxDQUFDLGlCQUFpQixFQUFLLEVBQ25DLFlBQVksQ0FBQyxlQUFlLEVBQUssRUFDakMsb0JBQW9CLENBQUMsQ0FBQztJQUUxQixNQUFNLGVBQWUsR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUNyRCxjQUFjLEVBQ2Qsb0JBQW9CLEVBQ3BCLFlBQVksQ0FBQyxpQkFBaUIsRUFBSyxDQUFDLENBQUM7SUFFekMsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUErQixlQUFlLEVBQUUsYUFBYSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ2hILE9BQU8sS0FBSyxDQUFDO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBuZ3J4U3RvcmUgZnJvbSAnQG5ncngvc3RvcmUnO1xyXG5cclxuaW1wb3J0IHsgSUNvbGxlY3Rpb25JdGVtIH0gZnJvbSAnLi9jb2xsZWN0aW9uLWFjdGlvbi1kZWYnO1xyXG5cclxuaW1wb3J0ICogYXMgcmVkdWNlckluZGV4IGZyb20gJy4vcmVkdWNlcnMvaW5kZXgnO1xyXG5cclxuLy8gU3RvcmVcclxuLypcclxuICAgIFJlZHVjZXJNYW5hZ2VyLFxyXG4gICAgU3RhdGVPYnNlcnZhYmxlLFxyXG4gICAgQWN0aW9uc1N1YmplY3RcclxuKi9cclxuXHJcbi8vIFN0YXRlT2JzZXJ2YWJsZVxyXG4vKlxyXG4gICBBY3Rpb25zU3ViamVjdFxyXG4gICBSZWR1Y2VyTWFuYWdlclxyXG4gICBTY2Fubm5lZEFjdGlvbnNTdWJqZWN0ID0+IGxlYWZcclxuICAgSW5pdGlhbFN0YXRlXHJcbiovXHJcblxyXG4vLyBBY3Rpb25zU3ViamVjdCAobGVhZilcclxuXHJcbi8vIFJlZHVjZXJNYW5hZ2VyXHJcbi8qXHJcbiAgIFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlclxyXG4gICBJTklUSUFMX1NUQVRFICA9PiBwYXNzIGluIHBhcmFtZXRlcnNcclxuICAgSU5JVElBTF9SRURVQ0VSUyA9PiBBY3Rpb25SZWR1Y2VyTWFwIChwYXNzIGluIHBhcmFtZXRlcnMpXHJcbiAgIFJFRFVDRVJfRkFDVE9SWSA9PiBjb21iaW5lUmVkdWNlcnNcclxuICAgQWN0aW9uUmVkdWNlckZhY3Rvcnk8YW55LCBhbnk+XHJcbiovXHJcblxyXG4vLyBSZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXJcclxuXHJcbi8qXHJcbiAgIEFjdGlvblNzdWJqZWN0ICAobGVhZilcclxuKi9cclxuXHJcbi8vIEFjdGlvblJlZHVjZXJGYWN0b3J5PGFueSwgYW55PiAoVXNlIGNvbWJpblJlZHVjZXIgZnVuY3Rpb24gZnJvbSB1dGlscylcclxuXHJcbi8qXHJcbiAgIEFjdGlvblJlZHVjZXJNYXBcclxuICAgaW5pdGlhbFN0YXRlXHJcblxyXG4gICBBY3Rpb25SZWR1Y2VyXHJcbiovXHJcblxyXG4vLyBjcmVhdGVSZWR1Y2VyZmFjdG9yeVxyXG4vKlxyXG4gICBBY3Rpb25SZWR1Y2VyRmFjdG9yeVxyXG4gICBNYXRhUmVkdWNlckZhY3RvcnlcclxuXHJcbiovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmFjdG9yeTxUIGV4dGVuZHMgSUNvbGxlY3Rpb25JdGVtPigpOiBuZ3J4U3RvcmUuU3RvcmU8cmVkdWNlckluZGV4LkdlbmVyaWNTdGF0ZTxUPj4ge1xyXG5cclxuICAgIGNvbnN0IGFjdGlvblN1YmplY3QgPSBuZXcgbmdyeFN0b3JlLkFjdGlvbnNTdWJqZWN0KCk7XHJcbiAgICBjb25zdCBzY2FubmVyQWN0aW9uU3ViamVjdCA9IG5ldyBuZ3J4U3RvcmUuU2Nhbm5lZEFjdGlvbnNTdWJqZWN0KCk7XHJcbiAgICBjb25zdCByZWR1Y2VyTWFuYWdlckRpc3BhdGNoOiBuZ3J4U3RvcmUuUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyID0gYWN0aW9uU3ViamVjdDtcclxuXHJcbiAgICBjb25zdCBhY3Rpb25SZWR1Y2VyRmFjdG9yeTogbmdyeFN0b3JlLkFjdGlvblJlZHVjZXJGYWN0b3J5PGFueSwgYW55PiA9IG5ncnhTdG9yZS5jb21iaW5lUmVkdWNlcnM7XHJcblxyXG4gICAgY29uc3QgcmVkdWNlck1hbmFnZXIgPSBuZXcgbmdyeFN0b3JlLlJlZHVjZXJNYW5hZ2VyKGFjdGlvblN1YmplY3QsXHJcbiAgICAgICAgcmVkdWNlckluZGV4LmJ1aWxkSW5pdGlhbFN0YXRlPFQ+KCksXHJcbiAgICAgICAgcmVkdWNlckluZGV4LmJ1aWxkUmVkdWNlck1hcDxUPigpLFxyXG4gICAgICAgIGFjdGlvblJlZHVjZXJGYWN0b3J5KTtcclxuXHJcbiAgICBjb25zdCBzdGF0ZU9ic2VydmFibGUgPSBuZXcgbmdyeFN0b3JlLlN0YXRlKGFjdGlvblN1YmplY3QsXHJcbiAgICAgICAgcmVkdWNlck1hbmFnZXIsXHJcbiAgICAgICAgc2Nhbm5lckFjdGlvblN1YmplY3QsXHJcbiAgICAgICAgcmVkdWNlckluZGV4LmJ1aWxkSW5pdGlhbFN0YXRlPFQ+KCkpO1xyXG5cclxuICAgIGNvbnN0IHN0b3JlID0gbmV3IG5ncnhTdG9yZS5TdG9yZTxyZWR1Y2VySW5kZXguR2VuZXJpY1N0YXRlPFQ+PihzdGF0ZU9ic2VydmFibGUsIGFjdGlvblN1YmplY3QsIHJlZHVjZXJNYW5hZ2VyKTtcclxuICAgIHJldHVybiBzdG9yZTtcclxufVxyXG4iXX0=