import { __decorate } from "tslib";
/**
 * @fileOverview
 * Defines the user credential. This user credential supports event
 * listening. Note that the credential is assumed to be Uppercase:
 * Username and Password
 */
import * as dependencies from '@polpware/fe-dependencies';
import { isArray } from '@polpware/fe-utilities';
import { observableDecorator } from '../decorators/observable.decorator';
const _ = dependencies.underscore;
function isEquiva(a, b) {
    // Strict equals
    if (a === b) {
        return true;
    }
    // Compare null
    if (a === null || b === null) {
        return a === b;
    }
    // Compare number, boolean, string, undefined
    if (typeof a !== 'object' || typeof b !== 'object') {
        return a === b;
    }
    // Compare arrays
    if (isArray(b) && isArray(a)) {
        if (a.length !== b.length) {
            return false;
        }
        let k = a.length;
        while (k--) {
            if (!isEquiva(a[k], b[k])) {
                return false;
            }
        }
    }
    const checked = {};
    const objectB = b;
    for (const k in objectB) {
        if (objectB.hasOwnProperty(k)) {
            if (!isEquiva(a[k], b[k])) {
                return false;
            }
            checked[k] = true;
        }
    }
    const objectA = a;
    for (const k in objectA) {
        if (objectA.hasOwnProperty(k)) {
            if (!checked[k] && !isEquiva(a[k], b[k])) {
                return false;
            }
        }
    }
    return true;
}
// immutable
let UserCredential = class UserCredential {
    /**
     * @constructor Credential
     */
    constructor(authPolicy) {
        this.authPolicy = authPolicy;
        this._user = {};
        this._security = authPolicy;
    }
    get asObservable() {
        const self = this;
        return self;
    }
    security(value) {
        if (value) {
            this._security = value;
        }
        return this._security;
    }
    // Does not trigger any event
    readFrom(data) {
        this._user = _.extend(this._user, data);
    }
    setUser(data) {
        if (isEquiva(this._user, data)) {
            return;
        }
        this._user = data;
        this.asObservable.fire('change:user', {
            data: this._user
        });
    }
    extendUser(data) {
        const newData = _.extend({}, this._user, data);
        this.setUser(newData);
    }
    getUser() {
        return _.extend({}, this._user);
    }
    subscribe(handler, likeBehaviorSubject = false) {
        this.asObservable.on('change:user', handler);
        if (likeBehaviorSubject) {
            const newEvt = { data: this._user };
            handler(newEvt);
        }
    }
    unSubscribe(handler) {
        this.asObservable.off('change:user', handler);
    }
    isUserKnown() {
        return !!(this._user && this._user.username);
    }
    isAuthenticated() {
        return this.authPolicy && !this.authPolicy.isExpired();
    }
};
UserCredential = __decorate([
    observableDecorator
], UserCredential);
export { UserCredential };
//# sourceMappingURL=data:application/json;base64,