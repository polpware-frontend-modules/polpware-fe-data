import * as ngrxStore from '@ngrx/store';
import * as reducerIndex from './reducers/index';
// Store
/*
    ReducerManager,
    StateObservable,
    ActionsSubject
*/
// StateObservable
/*
   ActionsSubject
   ReducerManager
   ScannnedActionsSubject => leaf
   InitialState
*/
// ActionsSubject (leaf)
// ReducerManager
/*
   ReducerManagerDispatcher
   INITIAL_STATE  => pass in parameters
   INITIAL_REDUCERS => ActionReducerMap (pass in parameters)
   REDUCER_FACTORY => combineReducers
   ActionReducerFactory<any, any>
*/
// ReducerManagerDispatcher
/*
   ActionSsubject  (leaf)
*/
// ActionReducerFactory<any, any> (Use combinReducer function from utils)
/*
   ActionReducerMap
   initialState

   ActionReducer
*/
// createReducerfactory
/*
   ActionReducerFactory
   MataReducerFactory

*/
export function factory() {
    const actionSubject = new ngrxStore.ActionsSubject();
    const scannerActionSubject = new ngrxStore.ScannedActionsSubject();
    const reducerManagerDispatch = actionSubject;
    const actionReducerFactory = ngrxStore.combineReducers;
    const reducerManager = new ngrxStore.ReducerManager(actionSubject, reducerIndex.buildInitialState(), reducerIndex.buildReducerMap(), actionReducerFactory);
    const stateObservable = new ngrxStore.State(actionSubject, reducerManager, scannerActionSubject, reducerIndex.buildInitialState());
    const store = new ngrxStore.Store(stateObservable, actionSubject, reducerManager);
    return store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb2xwd2FyZS9mZS1kYXRhLyIsInNvdXJjZXMiOlsibGliL2dlbmVyaWMtc3RvcmUvZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUl6QyxPQUFPLEtBQUssWUFBWSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELFFBQVE7QUFDUjs7OztFQUlFO0FBRUYsa0JBQWtCO0FBQ2xCOzs7OztFQUtFO0FBRUYsd0JBQXdCO0FBRXhCLGlCQUFpQjtBQUNqQjs7Ozs7O0VBTUU7QUFFRiwyQkFBMkI7QUFFM0I7O0VBRUU7QUFFRix5RUFBeUU7QUFFekU7Ozs7O0VBS0U7QUFFRix1QkFBdUI7QUFDdkI7Ozs7RUFJRTtBQUVGLE1BQU0sVUFBVSxPQUFPO0lBRW5CLE1BQU0sYUFBYSxHQUFHLElBQUksU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3JELE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxTQUFTLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUNuRSxNQUFNLHNCQUFzQixHQUF1QyxhQUFhLENBQUM7SUFFakYsTUFBTSxvQkFBb0IsR0FBNkMsU0FBUyxDQUFDLGVBQWUsQ0FBQztJQUVqRyxNQUFNLGNBQWMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUM3RCxZQUFZLENBQUMsaUJBQWlCLEVBQUssRUFDbkMsWUFBWSxDQUFDLGVBQWUsRUFBSyxFQUNqQyxvQkFBb0IsQ0FBQyxDQUFDO0lBRTFCLE1BQU0sZUFBZSxHQUFHLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQ3JELGNBQWMsRUFDZCxvQkFBb0IsRUFDcEIsWUFBWSxDQUFDLGlCQUFpQixFQUFLLENBQUMsQ0FBQztJQUV6QyxNQUFNLEtBQUssR0FBRyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQStCLGVBQWUsRUFBRSxhQUFhLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDaEgsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIG5ncnhTdG9yZSBmcm9tICdAbmdyeC9zdG9yZSc7XHJcblxyXG5pbXBvcnQgeyBJQ29sbGVjdGlvbkl0ZW0gfSBmcm9tICcuL2NvbGxlY3Rpb24tYWN0aW9uLWRlZic7XHJcblxyXG5pbXBvcnQgKiBhcyByZWR1Y2VySW5kZXggZnJvbSAnLi9yZWR1Y2Vycy9pbmRleCc7XHJcblxyXG4vLyBTdG9yZVxyXG4vKlxyXG4gICAgUmVkdWNlck1hbmFnZXIsXHJcbiAgICBTdGF0ZU9ic2VydmFibGUsXHJcbiAgICBBY3Rpb25zU3ViamVjdFxyXG4qL1xyXG5cclxuLy8gU3RhdGVPYnNlcnZhYmxlXHJcbi8qXHJcbiAgIEFjdGlvbnNTdWJqZWN0XHJcbiAgIFJlZHVjZXJNYW5hZ2VyXHJcbiAgIFNjYW5ubmVkQWN0aW9uc1N1YmplY3QgPT4gbGVhZlxyXG4gICBJbml0aWFsU3RhdGVcclxuKi9cclxuXHJcbi8vIEFjdGlvbnNTdWJqZWN0IChsZWFmKVxyXG5cclxuLy8gUmVkdWNlck1hbmFnZXJcclxuLypcclxuICAgUmVkdWNlck1hbmFnZXJEaXNwYXRjaGVyXHJcbiAgIElOSVRJQUxfU1RBVEUgID0+IHBhc3MgaW4gcGFyYW1ldGVyc1xyXG4gICBJTklUSUFMX1JFRFVDRVJTID0+IEFjdGlvblJlZHVjZXJNYXAgKHBhc3MgaW4gcGFyYW1ldGVycylcclxuICAgUkVEVUNFUl9GQUNUT1JZID0+IGNvbWJpbmVSZWR1Y2Vyc1xyXG4gICBBY3Rpb25SZWR1Y2VyRmFjdG9yeTxhbnksIGFueT5cclxuKi9cclxuXHJcbi8vIFJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2hlclxyXG5cclxuLypcclxuICAgQWN0aW9uU3N1YmplY3QgIChsZWFmKVxyXG4qL1xyXG5cclxuLy8gQWN0aW9uUmVkdWNlckZhY3Rvcnk8YW55LCBhbnk+IChVc2UgY29tYmluUmVkdWNlciBmdW5jdGlvbiBmcm9tIHV0aWxzKVxyXG5cclxuLypcclxuICAgQWN0aW9uUmVkdWNlck1hcFxyXG4gICBpbml0aWFsU3RhdGVcclxuXHJcbiAgIEFjdGlvblJlZHVjZXJcclxuKi9cclxuXHJcbi8vIGNyZWF0ZVJlZHVjZXJmYWN0b3J5XHJcbi8qXHJcbiAgIEFjdGlvblJlZHVjZXJGYWN0b3J5XHJcbiAgIE1hdGFSZWR1Y2VyRmFjdG9yeVxyXG5cclxuKi9cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBmYWN0b3J5PFQgZXh0ZW5kcyBJQ29sbGVjdGlvbkl0ZW0+KCk6IG5ncnhTdG9yZS5TdG9yZTxyZWR1Y2VySW5kZXguR2VuZXJpY1N0YXRlPFQ+PiB7XHJcblxyXG4gICAgY29uc3QgYWN0aW9uU3ViamVjdCA9IG5ldyBuZ3J4U3RvcmUuQWN0aW9uc1N1YmplY3QoKTtcclxuICAgIGNvbnN0IHNjYW5uZXJBY3Rpb25TdWJqZWN0ID0gbmV3IG5ncnhTdG9yZS5TY2FubmVkQWN0aW9uc1N1YmplY3QoKTtcclxuICAgIGNvbnN0IHJlZHVjZXJNYW5hZ2VyRGlzcGF0Y2g6IG5ncnhTdG9yZS5SZWR1Y2VyTWFuYWdlckRpc3BhdGNoZXIgPSBhY3Rpb25TdWJqZWN0O1xyXG5cclxuICAgIGNvbnN0IGFjdGlvblJlZHVjZXJGYWN0b3J5OiBuZ3J4U3RvcmUuQWN0aW9uUmVkdWNlckZhY3Rvcnk8YW55LCBhbnk+ID0gbmdyeFN0b3JlLmNvbWJpbmVSZWR1Y2VycztcclxuXHJcbiAgICBjb25zdCByZWR1Y2VyTWFuYWdlciA9IG5ldyBuZ3J4U3RvcmUuUmVkdWNlck1hbmFnZXIoYWN0aW9uU3ViamVjdCxcclxuICAgICAgICByZWR1Y2VySW5kZXguYnVpbGRJbml0aWFsU3RhdGU8VD4oKSxcclxuICAgICAgICByZWR1Y2VySW5kZXguYnVpbGRSZWR1Y2VyTWFwPFQ+KCksXHJcbiAgICAgICAgYWN0aW9uUmVkdWNlckZhY3RvcnkpO1xyXG5cclxuICAgIGNvbnN0IHN0YXRlT2JzZXJ2YWJsZSA9IG5ldyBuZ3J4U3RvcmUuU3RhdGUoYWN0aW9uU3ViamVjdCxcclxuICAgICAgICByZWR1Y2VyTWFuYWdlcixcclxuICAgICAgICBzY2FubmVyQWN0aW9uU3ViamVjdCxcclxuICAgICAgICByZWR1Y2VySW5kZXguYnVpbGRJbml0aWFsU3RhdGU8VD4oKSk7XHJcblxyXG4gICAgY29uc3Qgc3RvcmUgPSBuZXcgbmdyeFN0b3JlLlN0b3JlPHJlZHVjZXJJbmRleC5HZW5lcmljU3RhdGU8VD4+KHN0YXRlT2JzZXJ2YWJsZSwgYWN0aW9uU3ViamVjdCwgcmVkdWNlck1hbmFnZXIpO1xyXG4gICAgcmV0dXJuIHN0b3JlO1xyXG59XHJcbiJdfQ==